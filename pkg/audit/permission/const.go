package permission

import "github.com/hupe1980/awsrecon/pkg/iam"

var DefaultCredentialReturnActions = []iam.Action{
	"chime:createapikey",
	"codepipeline:pollforjobs",
	"cognito-identity:getopenidtoken",
	"cognito-identity:getopenidtokenfordeveloperidentity",
	"cognito-identity:getcredentialsforidentity",
	"cognito-idp:getsigningcertificate",
	"connect:getfederationtoken",
	"connect:getfederationtokens",
	"ec2:getpassworddata",
	"ecr:getauthorizationtoken",
	"gamelift:requestuploadcredentials",
	"gamelift:GetInstanceAccess",
	"iam:createaccesskey",
	"iam:createloginprofile",
	"iam:createservicespecificcredential",
	"iam:resetservicespecificcredential",
	"iam:updateaccesskey",
	"lightsail:getinstanceaccessdetails",
	"lightsail:downloaddefaultkeypair",
	"lightsail:createbucketaccesskey",
	"lightsail:getrelationaldatabasemasteruserpassword",
	"mediapackage:rotatechannelcredentials",
	"mediapackage:rotateingestendpointcredentials",
	"rds-db:connect",
	"redshift:getclustercredentials",
	"sso:getrolecredentials",
	"sts:assumerole",
	"sts:assumerolewithsaml",
	"sts:assumerolewithwebidentity",
	"sts:getfederationtoken",
	"sts:getsessiontoken",
}

var DefaultDataExfiltrationActions = []iam.Action{
	"s3:GetObject",
	"ssm:GetParameter",
	"ssm:GetParameters",
	"ssm:GetParametersByPath",
	"secretsmanager:GetSecretValue",
}

var DefaultPrivilegeEscalationMethods = map[string][]iam.Action{
	"CreateAccessKey":                       {"iam:createaccesskey"},
	"CreateLoginProfile":                    {"iam:createloginprofile"},
	"UpdateLoginProfile":                    {"iam:updateloginprofile"},
	"AddUserToGroup":                        {"iam:addusertogroup"},
	"CreateNewPolicyVersion":                {"iam:createpolicyversion"},
	"SetExistingDefaultPolicyVersion":       {"iam:setdefaultpolicyversion"},
	"AttachUserPolicy":                      {"iam:attachuserpolicy"},
	"AttachGroupPolicy":                     {"iam:attachgrouppolicy"},
	"AttachRolePolicy":                      {"iam:attachrolepolicy", "sts:assumerole"},
	"PutUserPolicy":                         {"iam:putuserpolicy"},
	"PutGroupPolicy":                        {"iam:putgrouppolicy"},
	"PutRolePolicy":                         {"iam:putrolepolicy", "sts:assumerole"},
	"UpdateRolePolicyToAssumeIt":            {"iam:updateassumerolepolicy", "sts:assumerole"},
	"CreateEC2WithExistingIP":               {"iam:passrole", "ec2:runinstances"},
	"PassExistingRoleToNewLambdaThenInvoke": {"iam:passrole", "lambda:createfunction", "lambda:invokefunction"},
	"PassExistingRoleToNewLambdaThenTriggerWithNewDynamo":      {"iam:passrole", "lambda:createfunction", "lambda:createeventsourcemapping", "dynamodb:createtable", "dynamodb:putitem"},
	"PassExistingRoleToNewLambdaThenTriggerWithExistingDynamo": {"iam:passrole", "lambda:createfunction", "lambda:createeventsourcemapping"},
	"PassExistingRoleToNewGlueDevEndpoint":                     {"iam:passrole", "glue:createdevendpoint"},
	"PassExistingRoleToCloudFormation":                         {"iam:passrole", "cloudformation:createstack"},
	"PassExistingRoleToNewDataPipeline":                        {"iam:passrole", "datapipeline:createpipeline"},
	"UpdateExistingGlueDevEndpoint":                            {"glue:updatedevendpoint"},
	"EditExistingLambdaFunctionWithRole":                       {"lambda:updatefunctioncode"},
}
